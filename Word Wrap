Problem Link : https://practice.geeksforgeeks.org/problems/word-wrap1646/1
------------------------------------------------------------------------------------------
Complexity : Time-O(N^2), Memory-O(N)
------------------------------------------------------------------------------------------
Logic :
As we know whenever we need max/ min we can use dp. So in here we will see what is the min
value if we have elements from i-(n-1) i can be from 0-(n-1).
We will first add 1 elements in line and cal its es(extra space) value the we go to nxt line
and when we back track we will add another element in the prev line and cal es and we keep doing 
that and store the value of i-(n-1) in dp[i] idx.

class Solution
{
    int[] dp;
    public int solveWordWrap (int[] nums, int k)
    {
        dp=new int[nums.length];
        Arrays.fill(dp, -1);
        return minES(0, 0, k, nums);
    }
    
    private int minES(int i, int j, int k, int[] arr){
        if(i>=arr.length-1)return 0;
        if(dp[i]!=-1)return dp[i];
        int tmp=k;
        boolean f=false;
        int max=Integer.MAX_VALUE;
        
        for(int i1=i;i1<arr.length;i1++){
            if(tmp<=arr[i1] && f){
                int ex=0;
                ex=(int)Math.pow(tmp, 2);
                max=Math.min(max, ex+minES(i1, j+1, k, arr));
                break;
            } else{
                tmp-=arr[i1];
                int ex=0;
                if(f)
                --tmp;
                if(i1!=arr.length-1)
                    ex=(int)Math.pow(tmp, 2);
                f=true;
                max=Math.min(max, ex+minES(i1+1, j+1, k, arr));
            }
        }
        dp[i]=max;
        return dp[i];
    }
}
