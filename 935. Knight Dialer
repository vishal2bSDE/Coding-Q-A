Problem Link : https://leetcode.com/problems/knight-dialer/
-----------------------------------------------------------------
Complexity : Time-O(8*4*3*N), Memory-O(8*4*3*N), TimeTaken-<1.5hr;
-----------------------------------------------------------------
Logic:
So for base case we will put 1 in all dp[1][i][j] because it doesn't matter where are you in the dial
you can take 1 step. So for next step we will go in all dir and add them with the current step+prev step sum
i.e dp[n][i][j] +=dp[n-1][i+diri][j+dirj]. diri and dirj are knight next cord addition.

class Solution {
    public int knightDialer(int n) {
        int mod=(int)1e9+7;
        int[][][] dp=new int[n+1][4][3];
        int[][] dirs={{2,1},{2,-1},{-2,1},{-2,-1},{1,2},{1,-2},{-1,2},{-1,-2}};
        long ans=0;
        dp[1][0][0]=1;dp[1][0][1]=1;dp[1][0][2]=1;
        dp[1][1][0]=1;dp[1][1][1]=1;dp[1][1][2]=1;
        dp[1][2][0]=1;dp[1][2][1]=1;dp[1][2][2]=1;
        dp[1][3][1]=1;//dp[1][0][1]=1;dp[1][0][2]=1;
        for(int i=2;i<=n;i++){
            for(int j=0;j<4;j++){
                for(int k=0;k<3;k++){
                    for(int[] dir:dirs){
                        if(j==3 && (k==0 || k==2))continue;
                        if(valid(j+dir[0], k+dir[1]))
                            dp[i][j][k]=(dp[i][j][k]%mod+dp[i-1][j+dir[0]][k+dir[1]]%mod)%mod;
                    }
                }
            }
        }
        for(int i=0;i<4;i++){
            for(int j=0;j<3;j++){
                ans=ans%mod+dp[n][i][j]%mod;
            }
        }
        return (int)ans;
    }
    private boolean valid(int i, int j){
        return i<4 && j<3 && i>=0 && j>=0;
    }
}
