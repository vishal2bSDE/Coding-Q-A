Problem Link : https://leetcode.com/problems/minimum-number-of-buckets-required-to-collect-rainwater-from-houses/
----------------------------------------------------------------------------------------------------------------------
Complexity : Time-O(N), Memory-O(N), TimeTaken-2hr
----------------------------------------------------------------------------------------------------------------------
Logic : 
We will use a 1d[].
So we will iterate string 2 times 1 to fill the array if there is a house at ith idx we will try to fill bucket at i+1th so that if i+2nd has
a house that bucket will take care of it. And the 2nd iteration will try to fill the bucket at i-1th place if there is no bucket at i+1th.
We just sum the 1d[] and return it and before doing that we will check in dp[] that every house should have atleast 1 bucket at their adjacent. 
If not return -1 instead.

class Solution {
    public int minimumBuckets(String street) {
        char[] ch=street.toCharArray();
        int n=ch.length, sum=0;
        int[] dp=new int[n];
        
        for(int i=0;i<n-1;i++){
            if(ch[i]=='H') {
                if(get(i-1, dp, ch) && ch[i+1]=='.')
                    dp[i+1]=1;
                else if(!buck(i-1, dp) && ch[i+1]=='.')
                    dp[i+1]=1;
            }
        }
        for(int i=n-1;i>0;i--){
            if(ch[i]=='H') {
                if(!buck(i+1, dp) && !buck(i-1, dp) && ch[i-1]=='.')
                    dp[i-1]=1;
            }
        }
        for(int i=0;i<n;i++){
            if(ch[i]=='H'){
                if(!buck(i-1, dp) && !buck(i+1, dp))
                    return -1;
            }
        }
        for(int ele:dp)
            sum+=ele;
        return sum;
    }
    private boolean get(int i, int[] dp, char[] ch){
        if(i<0 || i==ch.length)return true;
        return dp[i]==0 && ch[i]=='.';
    }
    private boolean buck(int i, int[] dp){
        if(i<0 || i==dp.length || dp[i]==0)return false;
        return dp[i]==1;
    }
}
