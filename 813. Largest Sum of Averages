Problem Link : https://leetcode.com/problems/largest-sum-of-averages/
------------------------------------------------------------------------
Complexity: Time- O(N^2*K), Memory- O(N*K), TimeTaken- <2hrs
------------------------------------------------------------------------
Logic:
First as in DP we need to figure out the state which will help us in convert the problem
into DP. So in this problem they are partition and no of elements left to partition.
And one major time efficent hint here is that if no of elements left in array is === K(partitions left)
then there sum will be the answer of that K nos of partition.
And also to save time i have converted the array into running sum array which will help us
to find the sum between i-j in O(1) time.

class Solution {
    double[][] dp;
    public double largestSumOfAverages(int[] nums, int k) {
        dp=new double[k+1][nums.length+1];
        for(int i=1;i<nums.length;i++){
            nums[i]+=nums[i-1];
        }
        if(nums.length==k)
            return nums[k-1];
        return traverse(nums, 0, k);
    }
    private double traverse(int[] nums, int i, int k){
        int n=nums.length;
        if(n==i)return 0;
        if(n-i==k)return (double)(nums[n-1]-get(nums, i-1));
        if(k==1)return ((double)(nums[n-1]-get(nums, i-1)))/(n-i);
        if(dp[k][i]!=0)return dp[k][i];
        
        double max=0;
        double prevSum=get(nums, i-1);
        for(int i1=i;i1<n;i1++){
            double sum=(nums[i1]-prevSum)/(i1-i+1);
            max=Math.max(max, sum+traverse(nums, i1+1, k-1));
        }
        dp[k][i]=max;
        return max;
    }
    private int get(int[] nums, int i){
        if(i<0)return 0;
        return nums[i];
    }
}
