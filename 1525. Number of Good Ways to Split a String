Problem Link : https://leetcode.com/problems/number-of-good-ways-to-split-a-string/
---------------------------------------------------------------------------------------------------
Complexity : Time-O(N), Memory-O(N), TimeTaken-<15min
---------------------------------------------------------------------------------------------------
Logic :
Used to dp[] 1 forward and 1 backward. So the unique char in both block is fdp[i](0..i) and bdp[i+1](i+1..n-1).

class Solution {
    public int numSplits(String s) {
        int n=s.length();
        if(n<2)return 0;
        int cnt=0;
        int[] fdp=new int[n];
        int[] bdp=new int[n];
        Set<Character> set=new HashSet();
        for(int i=0;i<n;i++){
            set.add(s.charAt(i));
            fdp[i]=set.size();
        }
        set=new HashSet();
        for(int i=n-1;i>=0;i--){
            set.add(s.charAt(i));
            bdp[i]=set.size();
        }
        for(int i=0;i<n-1;i++){
            if(fdp[i]==bdp[i+1])
                ++cnt;
        }
        
        return cnt;
    }
}
