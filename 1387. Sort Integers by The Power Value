Problem Link : https://leetcode.com/problems/sort-integers-by-the-power-value/
------------------------------------------------------------------------------------
Complexity : Time-O(N), Memory-O(N), TimeTaken-<60min
------------------------------------------------------------------------------------
Logic :
The logic is simple if you have seen an element save it so later when you see again
just return value. The tricky part about this Qs is that what value to keep in [] (line:22).
So the reason i decrement its value because if you see correctly i am adding extra 1 to value also at 
the time inside the traverse([]) acc to my logic which is making the calculation wrong.

class Solution {
    Map<Integer, Integer> map;
    public int getKth(int lo, int hi, int k) {
        int n=hi-lo+1;
        Integer[][] arr=new Integer[n][2];
        map=new HashMap();
        for(int i=lo;i<=hi;i++){
            int step=0;
            if(!map.containsKey(i)){
                step=traverse(i);
                map.put(i, step);  
            } 
            arr[i-lo][0]=i;
            arr[i-lo][1]=map.get(i)-1;
        }
        Arrays.sort(arr, (a1, a2) ->{
           if(a1[1]==a2[1]) 
               return a1[0]-a2[0];
            return a1[1]-a2[1];
        });
        return arr[k-1][0];
    }
    private int traverse(int ele){
        // System.out.print(ele+"->");
        if(ele==1)return 1;
        if(map.containsKey(ele))return map.get(ele);
        int step=0;
        if(ele%2==0)
            step=1+traverse(ele/2);
        else
            step=1+traverse((3*ele)+1);
        
        map.put(ele, step);
        return step;
    }
}
