Problem Link : https://practice.geeksforgeeks.org/problems/longest-increasing-subsequence-1587115620/1
--------------------------------------------------------------------------------------------------------------
Complexity : Time - O(NlogN), Memory - O(N)
--------------------------------------------------------------------------------------------------------------
Description :
We need to find the longest subseq. To do that we have to think in a way that a longest subseq will be achived
when ele+Max(ele2<ele) then we will get max. So if we save the len and ele corresonding to each othere we can achive that.
How?
Every time we encounter a subseq first we find the num that is lower than that ele but also greater than the rest. And get the len of that
subseq len. Add 1 to it and check in the map that do we have this length before if yeas check that whether that ele is smaller if yeas dont do anything 
otherwise update the val with this current ele. Because the smaller the ele at a len we get more room for next ele.
ex- we have [1 5 3 4]
          map1 [1-1][5-2][3-2] if you see the map carefully we can remove 5 cause 3 also has 2 length and is smaller than 5 which gives room for more ele.
          And will also improve our time.

class Solution 
{
    static Map<Integer, Integer> mape, mapl;
    static TreeSet<Integer> set;
    //Function to find length of longest increasing subsequence.
    static int longestSubsequence(int size, int arr[])
    {
        mape=new HashMap(); mapl=new HashMap();
        set=new TreeSet<Integer>();
        
        for(int i=0;i<size;i++){
            Integer tmp=set.lower(arr[i]);
            if(tmp==null){
                update(1, arr[i]);
            } else {
                update(1+mape.get(tmp), arr[i]);
            }
        }
        Iterator<Integer> it=mapl.keySet().iterator();
        int max=0;
        while(it.hasNext()){
            max=Math.max(max, it.next());
        }
        return max;
    }
    static void update(int len, int ele){
        if(mapl.containsKey(len)){
            if(mapl.get(len)>ele){
                mape.remove(mapl.get(len));
                set.remove(mapl.get(len));
                mapl.put(len, ele);
                mape.put(ele, len);
                set.add(ele);
            }
        } else {
            mapl.put(len, ele);
            mape.put(ele, len);
            set.add(ele);
        }
    }
} 
