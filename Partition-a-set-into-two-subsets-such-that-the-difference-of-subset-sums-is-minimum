Problem Link : https://www.geeksforgeeks.org/partition-a-set-into-two-subsets-such-that-the-difference-of-subset-sums-is-minimum/
-----------------------------------------------------------------------------------------------------------------------------------
Complexity : Time - O(N*totalSum), Memory - O(TotalSum)
-----------------------------------------------------------------------------------------------------------------------------------
  
  
Approach :
  1. Converted it to find the closest sum present to the half of the totalSum.
  2. Then changed it to coin change problem with only 1 instance of per coin.
  3. Then whenever the value sum is found/ true then finding the minimum diff.
  
  
  public int minDifference(int arr[], int n) 
	{ 
	    int sum=0;
	    for(int ele : arr)
	        sum+=ele;
	    int half=sum/2, min=sum;
	    boolean[] dp=new boolean[half+1];
	    Arrays.sort(arr);
	    
      dp[0]=true;
	    for(int i=1;i<=n;i++){
	        boolean[] dp1=new boolean[half+1];
	        dp1[0]=true;
	        for(int j=1;j<=half;j++){
	            if(dp[j] || j<arr[i-1])
	                dp1[j]=dp[j];
                else
                    dp1[j]=dp[j-arr[i-1]];
                
                if(dp1[j]){ // sum found
                    min=Math.min(min, (sum-j)-j);
                }
	        }
	        dp=dp1;
	    }
	    return min;
	} 
