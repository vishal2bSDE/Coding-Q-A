Problem Link : https://leetcode.com/problems/palindrome-partitioning-ii/
------------------------------------------------------------------------------
Complexity : Time - O(N^2), Memory - O(N^2)
------------------------------------------------------------------------------

class Solution {
    public int minCut(String s) {
        int n=s.length();
        boolean[][] pdp=new boolean[n][n];
        int[] dp=new int[n];
        int len=0;
        
        // fills the boolean[][], i to j is pallindrome then 't' else 'f'
        for(int i=0;i<n;i++){
            for(int j=n-1-len;j>=0;j--){ // bottom-up approach
            // checking every j to j+len length if pallindrom then 't' else 'f'
                if(len==0)
                    pdp[j][j]=true;
                else if(s.charAt(j)==s.charAt(j+len))
                    pdp[j][j+len]=getBoolean(pdp, j+1, j+len-1);
                else
                    pdp[j][j+len]=false;
            }
            ++len;
        }
        
        Arrays.fill(dp, Integer.MAX_VALUE);
        
        for(int i=0;i<n;i++){
            if(pdp[0][i]){ // if 0 to i is a pallindrome then no need to check no partition req
                dp[i]=0;
                continue;
            }
            for(int j=0;j<=i;j++){
                if(pdp[j][i]){ // modifies the dp[] only if j to i is a pallindrome otherwise no change
                    dp[i]=Math.min(dp[i], 1+get(j-1, dp));
                }
            }
        }
        
        return dp[n-1];
    }
    public int get(int i, int[] dp){
        if(i<0)
            return 0;
        return dp[i];
    }
    public boolean getBoolean(boolean[][] dp, int i, int j){
        if(i>j)
            return true;
        return dp[i][j];
    }
}
