Problem Link : https://leetcode.com/problems/longest-turbulent-subarray/
-------------------------------------------------------------------------
Complexity : Time-O(N), Memory-O(1), TimeTaken-<30min
-------------------------------------------------------------------------
Logic:
The algo is straight when ever one of the turbulent cond satisfy increase the cnt else 
reset it to 1 because as we are standing in one ele and comparing it with next hence base val
is 1.

class Solution {
    public int maxTurbulenceSize(int[] arr) {
        if(arr.length==1)return 1;
        int max=0, cnt=1, n=arr.length;
        for(int i=0;i<n-1;i++){
            if(i%2==0){
                if(arr[i+1]>arr[i])
                    ++cnt;
                else
                    cnt=1;
            } else {
                if(arr[i]>arr[i+1])
                    ++cnt;
                else
                    cnt=1;
            }
            max=Math.max(cnt, max);
        }cnt=1;
        for(int i=0;i<n-1;i++){
            if(i%2==0){
                if(arr[i+1]<arr[i])
                    ++cnt;
                else
                    cnt=1;
            } else {
                if(arr[i]<arr[i+1])
                    ++cnt;
                else
                    cnt=1;
            }
            max=Math.max(cnt, max);
        }
        
        return max;
    }
    
}
