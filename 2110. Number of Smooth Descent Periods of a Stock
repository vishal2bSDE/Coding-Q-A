Problem Link : https://leetcode.com/problems/number-of-smooth-descent-periods-of-a-stock/
--------------------------------------------------------------------------------------------
Complexity : Time-O(N), Memory-O(N), TimeTaken-1hr
--------------------------------------------------------------------------------------------
Logic :
We take a 1d[] in which we store cosecutive decresing nos till ith. And for each consecutive blk,
let the len be 'k' of that blk then we increase our cnt by (k*(k+1))/2.

class Solution {
    public long getDescentPeriods(int[] prices) {
        int n=prices.length;
        int[] dp=new int[n];
        long ans=0;
        dp[0]=1;
        for(int i=1;i<n;i++){
            dp[i]=1;
            if(prices[i-1]-prices[i]==1)
                dp[i]+=dp[i-1];
        }
        int tmp=n+1;
        for(int i=0;i<n;i++){
            if(tmp!=n+1 && tmp>=dp[i]){
                ans+=getCount((long)tmp);
            }
            tmp=dp[i];
        }
        ans+=getCount((long)dp[n-1]);
        return ans;
    }
    private long getCount(long n){
        return (n*(n+1)/2);
    }
}
