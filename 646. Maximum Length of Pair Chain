Problem Link : https://leetcode.com/problems/maximum-length-of-pair-chain/
---------------------------------------------------------------------------
Complexity: Time-O(NlogN), Memory-O(N), TimeTaken-<15min
---------------------------------------------------------------------------
Logic:
Fist we sort array in asc order by first index of each pair.
And use 2 pointer to traverse. First pointer will compare with secnd pointer whenever
they overlap first is updated to secnd and increase the overlapping counter else just update
first and secnd pointer. Then return totalsize-overlapping counter.

class Solution {
    public int findLongestChain(int[][] intervals) {
        Integer[][] arr=new Integer[intervals.length][2];
        for(int i=0;i<arr.length;i++){
            arr[i][0]=intervals[i][0];
            arr[i][1]=intervals[i][1];
        }
        Arrays.sort(arr, (a, b)->a[0]-b[0]);
        int ans=0;
        int l=0, r=1, n=intervals.length;
        while(r<n){
            if(arr[l][1]<arr[r][0]){
                l=r;
                r+=1;
            } else if(arr[l][1]>=arr[r][1]){
                ans+=1;
                l=r;
                r+=1;
            } else{
                ans+=1;
                r+=1;
            }
        }
        return n-ans;
    }
}
