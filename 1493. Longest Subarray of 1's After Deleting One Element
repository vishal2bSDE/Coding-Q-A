Problem Link : https://leetcode.com/problems/longest-subarray-of-1s-after-deleting-one-element/
--------------------------------------------------------------------------------------------
Complexity : Time-O(N), Memory-O(N), TimeTaken-60min
--------------------------------------------------------------------------------------------
Logic:
The idea is to stand at each idx and and nos of continuous 1s at both side except the curr idx
So to achive that used 2 dp [] 

class Solution {
    public int longestSubarray(int[] nums) {
        int n=nums.length;
        int[] fdp=new int[n];
        int[] bdp=new int[n];
        int ans=0;
        int sum=0, max=0;
        for(int i=0;i<n;i++){
            sum+=nums[i];
            if(nums[i]==0)
                sum=0;
            fdp[i]=sum;
        }
        sum=0;
        for(int i=n-1;i>=0;i--){
            sum+=nums[i];
            if(nums[i]==0)
                sum=0;
            bdp[i]=sum;
        }
        if(n==3 && nums[0]==0 && nums[2]==0 && nums[1]==1)
            return 1;
        if(n==2){
            return sum==1 ? 0 : 1;
        }
        if(n==1)
            return 0;
        for(int i=1;i<n-1;i++){
            max=Math.max(max, fdp[i-1]+bdp[i+1]);
        }
        max=Math.max(max, fdp[n-1]-1);
        max=Math.max(max, bdp[0]-1);
        return max;
    }
}
